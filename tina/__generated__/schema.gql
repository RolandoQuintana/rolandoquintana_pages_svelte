# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  project(relativePath: String): Project!
  projectConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ProjectFilter): ProjectConnection!
  skill(relativePath: String): Skill!
  skillConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SkillFilter): SkillConnection!
}

input DocumentFilter {
  page: PageFilter
  project: ProjectFilter
  skill: SkillFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Page | Project | Skill | Folder

type Page implements Node & Document {
  title: String!
  description: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PageFilter {
  title: StringFilter
  description: StringFilter
  body: RichTextFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Project implements Node & Document {
  title: String!
  description: String!
  thumbnail: String
  technologies: [String]
  githubUrl: String
  liveUrl: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ProjectFilter {
  title: StringFilter
  description: StringFilter
  thumbnail: ImageFilter
  technologies: StringFilter
  githubUrl: StringFilter
  liveUrl: StringFilter
  body: RichTextFilter
}

type ProjectConnectionEdges {
  cursor: String!
  node: Project
}

type ProjectConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ProjectConnectionEdges]
}

type Skill implements Node & Document {
  title: String!
  category: String!
  proficiency: Float!
  icon: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input SkillFilter {
  title: StringFilter
  category: StringFilter
  proficiency: NumberFilter
  icon: StringFilter
}

type SkillConnectionEdges {
  cursor: String!
  node: Skill
}

type SkillConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SkillConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updateProject(relativePath: String!, params: ProjectMutation!): Project!
  createProject(relativePath: String!, params: ProjectMutation!): Project!
  updateSkill(relativePath: String!, params: SkillMutation!): Skill!
  createSkill(relativePath: String!, params: SkillMutation!): Skill!
}

input DocumentUpdateMutation {
  page: PageMutation
  project: ProjectMutation
  skill: SkillMutation
  relativePath: String
}

input DocumentMutation {
  page: PageMutation
  project: ProjectMutation
  skill: SkillMutation
}

input PageMutation {
  title: String
  description: String
  body: JSON
}

input ProjectMutation {
  title: String
  description: String
  thumbnail: String
  technologies: [String]
  githubUrl: String
  liveUrl: String
  body: JSON
}

input SkillMutation {
  title: String
  category: String
  proficiency: Float
  icon: String
}

schema {
  query: Query
  mutation: Mutation
}
